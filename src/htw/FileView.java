package htw;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;

import javax.swing.GroupLayout;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Tobbe
 */
public class FileView extends javax.swing.JFrame {

	// Meine Variablen-Deklaration:
    private String pattern=null;
    private int Suchposition=0;
    // Ende der Deklaration
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel lblMessage;
    private JMenu jMenuFile;
    private JMenu jMenuEdit;
    private JMenuBar jMenuBar1;
    private JMenuItem jMenuItemOpen;
    private JMenuItem jMenuItemClose;
    private JMenuItem jMenuItemSearch;
    private JMenuItem jMenuItemContinueSearch;
    private JScrollPane jspText;
    private JScrollPane jspOktal;
    private JTabbedPane jTabbedPane1;
    private JTextArea jtaText;
    private JTextArea jtaOktal;
    // End of variables declaration//GEN-END:variables
	
    /** Creates new form FileView */
    public FileView() {
        initComponents();
        setVisible(true);
    }

    public FileView(String fileName) {
        this();
        loadFile(fileName);                 // Datei als Text laden
        loadFileOkt(fileName);              // Datei Byteweise als Okt. laden
        jtaText.setCaretPosition(0);     // TextArea ausrichten
        jtaOktal.setCaretPosition(0);
    }
    
     public FileView(File f) {
        this(f.getAbsolutePath());
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMessage = new JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jspText = new JScrollPane();
        jtaText = new JTextArea();
        jspOktal = new JScrollPane();
        jtaOktal = new JTextArea();
        jMenuBar1 = new JMenuBar();
        jMenuFile = new JMenu();
        jMenuItemOpen = new JMenuItem();
        jMenuItemClose = new JMenuItem();
        jMenuEdit = new JMenu();
        jMenuItemSearch = new JMenuItem();
        jMenuItemContinueSearch = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        lblMessage.setHorizontalAlignment(SwingConstants.LEFT);
        lblMessage.setText(" ");

        jtaText.setColumns(20);
        jtaText.setEditable(false);
        jtaText.setRows(5);
        jspText.setViewportView(jtaText);

        jTabbedPane1.addTab("Text", jspText);

        jtaOktal.setColumns(20);
        jtaOktal.setEditable(false);
        jtaOktal.setRows(5);
        jspOktal.setViewportView(jtaOktal);

        jTabbedPane1.addTab("Oktal", jspOktal);

        jMenuFile.setText("Datei");

        jMenuItemOpen.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setText("÷ffnen");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jMenuItemClose.setText("Schlieﬂen");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemClose);

        jMenuBar1.add(jMenuFile);

        jMenuEdit.setText("Bearbeiten");

        jMenuItemSearch.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSearch.setText("Suchen");
        jMenuItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemSearch);

        jMenuItemContinueSearch.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItemContinueSearch.setText("Weitersuchen");
        jMenuItemContinueSearch.setEnabled(false);
        jMenuItemContinueSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemContinueSearch);

        jMenuBar1.add(jMenuEdit);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMessage, GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMessage)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents    

    private FileFilter filefilter = new FileFilter() {
        @Override
        public boolean accept(File f) {
            return (f.getAbsolutePath().endsWith("txt") || f.isDirectory());  //Nur Dateien des Typs .txt zulassen.
        }

        @Override
        public String getDescription() {
            return "Textdateien";
        }
    };    
    
    private void jMenuItem1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Button:  √ñffnen

        JFileChooser filechooser = new JFileChooser();       

        filechooser.setFileFilter(filefilter);

        filechooser.addActionListener(actionFileChooser);
        filechooser.showOpenDialog(this);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private ActionListener actionFileChooser = new ActionListener() {
		public void actionPerformed (ActionEvent e) {
			fileSelected(e);
		}
	};
    

    private void jMenuItem3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Button : Suchen

        // Popup zum Abfragen des Suchpatterns initialisieren und ausf√ºhren
        Searchpopup Searchpop = new Searchpopup(this, true);
        Searchpop.setVisible(true);
        pattern = Searchpop.getPattern();                   // pattern von Searchpopup abfragen
 
        int loc = search();                                  //Suche ausf√ºhren
        Suchposition=0;
        if (loc!=-1) {        
        	jtaText.setCaretPosition(loc);                 //Position des TextFeldes auf das gesuchte Pattern ausrichten
        	jtaText.select(loc,(loc+pattern.length()));    //Gefundenes Pattern in TextArea Markieren
        	Suchposition=loc+pattern.length();                //Zuletzt gefundener Ort merken, um bei einer weiteren Suche fortzufahren
        	jtaText.requestFocus();
        	jMenuItemContinueSearch.setEnabled(true);                      //Weitersuche im Men√º aktivieren
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        //Button : Weitersuchen

        int loc = continueSearch(Suchposition);               // Von vorher gespeicherter Suhposition an weitersuchen
        if (loc!=-1) {        
        	jtaText.setCaretPosition(loc);                //Position des TextFeldes auf das gesuchte Pattern ausrichten
          	jtaText.select(loc,loc+pattern.length());     //Gefundenes Pattern in TextArea Markieren
          	Suchposition=loc + pattern.length();             //Zuletzt gefundener Ort merken, um bei einer weiteren Suche fortzufahren
          jtaText.requestFocus();
        } else {        
        	Suchposition=0;                                 //Suchposition wieder an den Anfang der Datei setzen
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void fileSelected(ActionEvent e) {
        JFileChooser fc = (JFileChooser)e.getSource();
        File f = fc.getSelectedFile();
        if (f != null) {
            //Variablen neu initialisieren  Falls eine 2. Datei ge√∂ffnet wird.
            jtaText.setText("");
            jtaOktal.setText("");
            pattern="";
            Suchposition=0;
            //-----------------
            loadFile(f);                            //Datei als Text laden
            loadFileOkt(f);                         //Datei Bitweise als Okt. laden
            jtaText.setCaretPosition(0);         // TextArea ausrichten
            jtaOktal.setCaretPosition(0);
        }
    }
    
    private int search() {  //Sucht pattern in jTextArea1, wenn gefunden gibt es die Position aus, wenn nicht null        
    	String text = jtaText.getText();
    	if (text.matches("(?s).*" + pattern + ".*")) { //mit matches √ºberpr√ºfen ob das gesuchte Pattern im Text vorkommt                
        	int a = text.indexOf(pattern);              //Anfangskoordinate des Patterns suchen
            return a;
         }  
         return -1;
       
    }

    private int continueSearch(int beginning) { //Sucht pattern in jTextArea1 von Position "Anfang" aus, wenn gefunden gibt es die Position aus, wenn nicht null
        String text = jtaText.getText();
    	int a = text.indexOf(pattern,beginning);         //Anfangskoordinaten des Patterns von Position "Anfang" aus
        return a;
    }


    private void loadFileOkt(File file) {
    	loadFileOkt(file.getAbsolutePath());
    }

    private void loadFileOkt(String fileName) {
        try {
        	FileInputStream fisInput = new FileInputStream(fileName);
            BufferedInputStream bisInput = new BufferedInputStream(fisInput);
            byte[] b = new byte[18];
            String line="";
            while ( bisInput.read(b) != -1) {
                for (int i = 0; i < 18; i++) {
                  line = line.concat(String.format("%03o ", b[i]));         //18 Bytes einlesen und  in Line schreiben
                }               
                line = line.concat("\n");                                   //Zeilenumbruch hinzuf√ºgen
                jtaOktal.append(line);                                    //Zeile an jTextArea√ºbergeben
                line="";                                                    //Zeile f√ºr n√§chste Zeile wieder clearen
            }
            bisInput.close();
        }
        catch(Exception e) {
        	
        }
    }

    private void loadFile(File file) {
        loadFile(file.getAbsolutePath());
    }
    
    private void loadFile(String fileName) {
        int zeichenanzahl = 0;
        int zeilenanzahl = 0;
        int woerteranzahl = 0;
        
        try {
        	FileReader frInput = new FileReader(fileName);
            BufferedReader brInput = new BufferedReader(frInput);
            String line = null;
            while ((line = brInput.readLine()) != null) {                                //Zeile einlesen            
                zeichenanzahl += line.length();                                     //Enthaltene Zeilenanzahl zur Gesamtzahl addieren
                woerteranzahl += line.split(" ").length;                            //Enthaltene W√∂rter zur Gesamtanzahl hinzuf√ºgen
                jtaText.append(String.format("%5d#  ", ++zeilenanzahl) +  line + "\n");//Zeilennr. und Zeile an textarea hinzuf√ºgen, Zeilenanzahl um 1 erh√∂hen
            }
            brInput.close();
        }
        catch(Exception e) {
        	
        }        
        lblMessage.setText(String.format("W√∂rter:  %d,  Zeichen:  %d,  Zeilen:   %d", woerteranzahl, zeichenanzahl, zeilenanzahl));
    }
}